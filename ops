#!/bin/bash

# []: optional, (): required, <name>: fill with sth, |: or, ...: multiple
# ops [
#   init [-b|--build include build.sh in master]
#        [-i|--install include install.sh and uninstall.sh in master]
#        [-s|--start include start.sh in master]
#        [--clone <repo>]
#        [--host <git host>]
#        [--no-config]
#        (-n|--name) <repo name> [...]|
#       if --build is present deploying to 'build' branch triggers build.sh and pushes 'release' directory to 'release' branch.
#   deploy [-h --host <host>|-c --cluster <cluster>|-a --automatic]|
#       deploy the project. it pushes 'master' to 'release'.
#       if build.sh is present. pushes 'master' to 'build' wich triggers a build and release will be updated.
#       --automatic will set the project
#   rollback [<host>]|
#       rolls back the release and updates hosts.
#   config [-h --host <host>|-c --cluster <cluster>|-a --automatic]|
#       push to a config repository
#   pm [ls|end|kill|log|stop|start|restart|status] <host>|
#   host [ls|resolve <host>|add <host> <addr>|remove <host>|rename <host> <name>]|
#   cluster (ls|add|remove) <name> [<host> ...]|
#       when adding if cluster exists the given hosts will be added to existing cluster
#       if not the cluster will be made with given hosts.
#       when removing if one or some hosts are specified they will be removed from cluster
#       if no host is given the whole cluster will be removed.
#   install|uninstall|
#   help [<cmd>]
# ]

# utils :

# 'run ops foo bar' => 'ops foo bar'
# 'run any' => 'any'
# 'run' => 'ops'
ctx="ops"
run () {
    ctx="$ctx"_${1:-main}
    shift
    $ctx $@
}


init_git_config () {
    [[ ! `git config --get user.name` ]] && git config --local user.name "ops" && git config --local user.email "ops@cicd"
}


# install and uninstall ops locally
ops_install () {
    # if already installed
    which ops &> /dev/null && return 0
    sudo touch /etc/clusters
    [[ ! -d ~/.ops_repos ]] && mkdir ~/.ops_repos
    cat ${BASH_SOURCE} | sudo tee /usr/local/bin/ops &> /dev/null
    sudo chmod +x /usr/local/bin/ops
}
ops_uninstall () {
    # if already not installed
    which ops &> /dev/null || return 0
    sudo rm /usr/local/bin/ops
}



# sub commands :

# subcommand template for ./ops yo <1> <2>
# ops_yo () {
#     echo yoing $1 $2
# }

# runs default action
ops_main () { ops_deploy; } # todo deploy to default location

# create a --bare git repo
# automated deployments using release,secret branches
# adds a standalone deploy script for dev
ops_init () {
    names=()
    while [ $# -gt 0 ]; do
        case $1 in
            -b|--build)
                build=1
                shift
            ;;
            -s|--start)
                start=1
                shift
            ;;
            -i|--install)
                install=1
                shift
            ;;
            -h|--host)
                host=$2
                shift 2
            ;;
            -c|--clone)
                clone=$2
                shift 2
            ;;
            -n|--name)
                names+=($2)
                shift 2
            ;;
            --no-config)
                noconf=1
                shift
            ;;
            *)
                echo unrecognized option or data $1
                exit 1
            ;;
        esac
    done
    
    pushd . > /dev/null
    for name in "${names[@]}"; do
        if [[ ${host} ]]; then
            ssh -t ${host} "
                if [[ ! -d ~/repos ]]; then
                    mkdir ~/repos
                fi
                if [[ ! -d ~/repos/${name}.git ]]; then
                    cd ~/repos
                    mkdir ${name}.git
                    cd ${name}.git; git init --bare
                    if [[ ! ${noconf} ]]; then
                        mkdir ${name}.config.git
                        cd ../${name}.config.git; git init --bare
                    fi
                fi
            "
        else
            [[ ! -d ~/.ops_repos ]] && mkdri ~/.ops_repos
            cd ~/.ops_repos/
            if [[ ! -d ./${name} ]]; then
                mkdir ${name}.git ${name}.config.git
                cd ${name}.git; git init --bare
                cd ${name}.config.git; git init --bare
            fi
        fi
        
        cd /tmp
        if [[ ! ${clone} ]]; then
            if [[ ${host} ]]; then
                clone=${host}:~/repos/${name}.git
            else
                clone=~/.ops_repos/${name}.git
            fi
        fi
        git clone --recurse-submodules ${clone} ${name}
        cd ${name}

        init_git_config

        if [[ ${host} ]]; then
            git remote add ops ${host}:~/repos/${name}.git
        else
            git remote add ops ~/.ops_repos/${name}.git
        fi

        git pull --recurse-submodules ops master

        if [[ ${build} && ! -e build.sh ]]; then
            echo '#!/bin/bash
# implement build script
# it must put build files in ./release directory' > ./build.sh
            git add ./build.sh
        fi
        
        if [[ ${install} ]]; then
            [[ ! -e install.sh ]] && echo '#!/bin/bash
# implement install script
# it must put program files in related directories' > ./install.sh
            git add ./install.sh

            [[ ! -e uninstall.sh ]] && echo '#!/bin/bash
# implement uninstall script
# it must clean installed program files from related directories' > ./uninstall.sh
            git add ./uninstall.sh
        fi

        if [[ ${start} && ! -e start.sh ]]; then
            echo '#!/bin/bash
# implement start script
# it must start the program' > ./start.sh
            git add ./start.sh
        fi

        git commit -m "Add initial placeholder scripts"

        git push -u ops master
        cd ..
        rm -rf ${name}
        # done making new repo
        
        if [[ ! ${noconf} ]]; then
            # make config repo
            if [[ ${host} ]]; then
                clone=${host}:~/repos/${name}.config.git
            else
                clone=~/.ops_repos/${name}.config.git
            fi
            git clone ${clone} ${name}
            cd ${name}.config

            if [[ ${host} ]]; then
                git remote add ops ${host}:~/repos/${name}.config.git
            else
                git remote add ops ~/.ops_repos/${name}.config.git
            fi

            git pull ops master

            if [[ ! -e .env ]]; then
                echo '# this file will be sourced on start' > .env
                git add .env
            fi

            git commit -m "Add initial config"
            
            git push -u ops master
            cd ..
            rm -rf ${name}.config
        fi
    done
    popd > /dev/null
}

# deploy current project to a set of hosts
ops_deploy () {
    echo deploing
}

# process manager of ops
ops_pm () { run $@; }
# run default pm action
ops_pm_main () { ops_pm_ls; }
# list all processes
ops_pm_ls () {
    echo pm_lsing
}
# start a process
ops_pm_start () {
    echo pm_starting
}

# todo add other pm functions

# host manager
ops_host () { run $@; }
# run default host action
ops_host_main () { ops_host_ls; }
# list hosts
ops_host_ls () {
    cat /etc/hosts
}
# add a host to ops 'ops host add <name> <addr>'
ops_host_add () {
    name=$1
    addr=$2
    if [[ `grep -E "\s${name}$" /etc/hosts` ]]; then
        ssh-copy-id ${name}
        return 0
    fi
    echo "${addr} ${name}" | sudo tee -a /etc/hosts &> /dev/null
    ssh-copy-id ${name}
}
# removes a host from ops and clusters 'ops host remove <name>'
ops_host_remove () {
    name=$1
    grep -ve "\s${name}$" /etc/hosts | sudo tee /etc/hosts &> /dev/null
    sed -E "/s/${name}\s//g" /etc/clusters | sudo tee /etc/clusters &> /dev/null
}

# rename a host. it updates clusters if host was in one
ops_host_rename () {
    name1=$1
    name2=$2
    if [[ ! `grep -E "\s${name1}$" /etc/hosts` ]]; then
        echo host ${name1} does not exist.
        exit 1
    elif [[ `grep -E "\s${name2}$" /etc/hosts` ]]; then
        echo host ${name2} exists. can not rename to it
        exit 1
    fi

    sed -E "s/${name1}$/${name2}/g" /etc/hosts | sudo tee /etc/hosts &> /dev/null
    sed -E "s/${name1}\s/${name2}/g" /etc/clusters | sudo tee /etc/clusters &> /dev/null
}


# manage a set of hosts using ops cluster
ops_cluster () {
    [[ ! -e /etc/clusters ]] && sudo touch /etc/clusters
    run $@;
}
# run default cluster action
ops_cluster_main () { ops_cluster_ls; }

# list saved clusters 'ops cluster ls'
ops_cluster_ls () {
    cat /etc/clusters
}

# add a cluster or add hosts to existing cluster 'ops cluster add <name> <host> ...'
ops_cluster_add () {
    name=$1
    shift
    hosts=()
    while [ $# -gt 0 ]; do
        hosts+=($1)
        shift
    done

    if [[ ! ${name} ]]; then
        echo specify a name 'ops cluster add <name> <host> ...'
        exit 1
    fi

    # make sure no duplicate is in hosts array and already saved hosts
    declare -A hostmap
    for host in "${hosts[@]}"; do
        hostmap[${host}]=${host}
    done
    for host in `grep -E "^${name}$|\s${name}$" /etc/clusters | rev | cut -s -d ' ' -f 2- | rev`; do
        hostmap[${host}]=${host}
    done
    hosts="${hostmap[@]}"
    [[ ${#hostmap[@]} > 0 ]] && hosts="${hosts} "
    
    # change /etc/clusters entry or append to it
    if [[ `grep -E "^${name}$|\s${name}$" /etc/clusters` ]]; then
        sed -E "s/^${name}$|.*\s${name}$/${hosts}${name}/g" /etc/clusters | sudo tee /etc/clusters &> /dev/null
    else
        echo "${hosts}${name}" | sudo tee -a /etc/clusters &> /dev/null
    fi
}

# remove a cluster or remove hosts from cluster
ops_cluster_remove () {
    name=$1
    shift
    hosts=()
    while [ $# -gt 0 ]; do
        hosts+=($1)
        shift
    done

    if [[ ! ${name} ]]; then
        echo specify a name 'ops cluster remove <name> [<host> ...]'
        exit 1
    fi

    if [[ "${#hosts[@]}" == 0 ]]; then
        grep -v -E "^${name}$|.*\s${name}$" /etc/clusters | sudo tee /etc/clusters &> /dev/null
    else
        declare -A hostmap
        for host in `grep -E "^${name}$|\s${name}$" /etc/clusters | rev | cut -s -d ' ' -f 2- | rev`; do
            hostmap[${host}]=${host}
        done
        for host in "${hosts[@]}"; do
            unset hostmap[${host}]
        done
        hosts="${hostmap[@]}"
        [[ ${#hostmap[@]} > 0 ]] && hosts="${hosts} "

        # change /etc/clusters entry or append to it
        if [[ `grep -E "^${name}$|\s${name}$" /etc/clusters` ]]; then
            sed -E "s/^${name}$|.*\s${name}$/${hosts}${name}/g" /etc/clusters | sudo tee /etc/clusters &> /dev/null
        else
            echo "${hosts}${name}" | sudo tee -a /etc/clusters &> /dev/null
        fi
    fi
}


ops_help () {
    echo helping
}

run $@